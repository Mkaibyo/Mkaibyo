import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Put a short phrase describing the program here.
 *
 * @author Put your name here
 *
 */
public final class RSSAggregatorr {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregatorr() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //variables
        String title = "No Title";
        String description = "no description";
        String link = "No link";

        //get indexs
        int indexTitle = getChildElement(channel, "title");
        int indexdescription = getChildElement(channel, "description");
        int indexlink = getChildElement(channel, "link");
        //get inputs
        if (channel.child(indexTitle).numberOfChildren() > 0) {
            title = channel.child(indexTitle).child(0).label();
        } else {
            title = "no title";
        }
        if (channel.child(indexdescription).numberOfChildren() > 0) {
            description = channel.child(indexdescription).child(0).label();
        }
        link = channel.child(indexlink).child(0).label();

        //output
        out.println("<html>" + "<head>" + "<title>" + title + "</title>");
        out.println("</head>" + "<body>");
        out.println(
                "<h1>" + "<a href='" + link + "'>" + title + "</a>" + "</h1>");
        out.println("<p>");
        out.println(description);
        out.println("</p>");
        out.println("<table border =\"1\">");

        out.println("<th>" + "Date" + "</th>");
        out.println("<th>" + "Source" + "</th>");
        out.println("<th>" + "News" + "</th>");
        out.println("<tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or    *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int childElementIndex = -1;
        int i = 0;
        while (i < xml.numberOfChildren() && childElementIndex == -1) {
            if (xml.child(i).label().equals(tag)) {
                childElementIndex = i;
            }
            i++;
        }
        return childElementIndex;

    }

    /**
     * Processes one news item and outputs the title, or the description if the
     * title is not present, and the link (if available) with appropriate
     * labels.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures out.content = #out.content * [the title (or description) and
     *          link]
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //variables
        String Source = "";
        String pubDate = "";
        String News = "";
        String link = "";
        String Sourcelink = "";
        int sourceChild = getChildElement(item, "source");
        //pubdate
        if (item.child(getChildElement(item, "pubDate"))
                .numberOfChildren() > 0) {
            pubDate = item.child(getChildElement(item, "pubDate")).child(0)
                    .label();
        } else {
            pubDate = "None available";
        }
        //source
        if (sourceChild != -1) {
            Source = item.child(sourceChild).child(0).label();
            Sourcelink = item.child(sourceChild).attributeValue("url");
        } else {
            Source = "No source available";
        }

        //link
        if (item.child(getChildElement(item, "link")).numberOfChildren() > 0) {
            link = item.child(getChildElement(item, "link")).child(0).label();
        } else {
            link = "No link available";
        }

        //title or description
        int title = getChildElement(item, "title");
        if (item.child(title).numberOfChildren() != 0) {
            News = item.child(title).child(0).label();
        } else {
            News = item.child(getChildElement(item, "description")).child(0)
                    .label();
        }

        //output
        out.println("<th>" + pubDate + "</th>");
        if (Sourcelink.length() != 0) {
            out.println("<th>" + "<a href='" + Sourcelink + "'>" + Source
                    + "</a>" + "</th>");
        } else {
            out.println("<th>" + Source + "</th>");
        }

        out.println(
                "<th>" + "<a href='" + link + "'>" + News + "</a>" + "</th>");
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        SimpleWriter outfile = new SimpleWriter1L(file);
        //verify version
        if (xml.hasAttribute("version")) {
            if (xml.attributeValue("version").equals("2.0")) {
                XMLTree channel = xml.child(0);
                //process items
                outputHeader(channel, outfile);

                for (int i = 0; i < channel.numberOfChildren(); i++) {
                    if (channel.child(i).label().equals("item")) {
                        processItem(channel.child(i), outfile);
                    }
                }

                outputFooter(outfile);
            }
        }
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //variables
        String url = "";
        String fileName = "";
        //prompt
        out.println("Enter the XML file containing URLS");
        url = in.nextLine();
        out.println("enter filename including .html at the end");
        fileName = in.nextLine();
        SimpleWriter file = new SimpleWriter1L(fileName);
        //Maybe?
        XMLTree index = new XMLTree1(url);
        String xmlfilename = "";
        String xmlurl = "";

        //process feed
        for (int b = 0; b < index.numberOfChildren(); b++) {
            xmlurl = index.child(b).attributeValue("url");
            xmlfilename = index.child(b).attributeValue("file");
            processFeed(xmlurl, xmlfilename, out);
        }
        // index page
        String title = index.attributeValue("title");
        file.print("<html>");
        file.print("<head>");
        file.print("<title>" + title + "</title>");
        file.print("</head>");
        file.print("<body>");
        file.print("<head>");
        file.print("<h1>" + title + "</h1>");
        file.print("</head>");
        file.print("<ul>");
        for (int k = 0; k < index.numberOfChildren(); k++) {
            String name = index.child(k).attributeValue("name");
            String indexfile = index.child(k).attributeValue("file");
            file.print("<li>");
            file.print("<p>");
            file.print("<a href=\"" + indexfile + "\">" + name + "</a>");
            file.print("</p>");
            file.print("</li>");
        }

        //closing index page
        file.print("</ul>)" + " </body>" + "</html>");

        in.close();
        out.close();
    }

}
